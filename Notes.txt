2023 Web Notes




#-- Impo Links
1. Old HTML CSS Bootstrap of Angela Yu Videos : https://appbrewery.com/courses/legacy-complete-web-development-course/lectures/46570401
2. Lorem Ipsum - https://www.lipsum.com/
3. Color palettes websites for Devs - https://colorhunt.co/
4. CSS Positioning : https://appbrewery.github.io/css-positioning/
5. Flexbox guide : https://css-tricks.com/snippets/css/a-guide-to-flexbox/
6. Practice Flex-Box : https://appbrewery.github.io/flexboxfroggy/
7. Flex-Layout : https://appbrewery.github.io/flex-layout/
8. Grid vs Flexbox : https://appbrewery.github.io/grid-vs-flexbox/
9. Grid Sizing : https://appbrewery.github.io/grid-sizing/
10. Grid Garden Exercise : https://appbrewery.github.io/gridgarden/
11. Practice Bootstrap Layout : https://appbrewery.github.io/bootstrap-layout/
12. Bootstrap spacing notations : https://getbootstrap.com/docs/4.0/utilities/spacing/
13. TinDog Website : https://appbrewery.github.io/tindog/
14. For getting colors(Analogous, Complimentary, Monochromatic) : https://color.adobe.com/create/color-wheel
15. Daily UI and collect UI
16. Refer this example website for Portfolio : https://appbrewery.github.io/capstone-2-example/
17. all the APPbreery resources : https://appbrewery.com/p/web-development-course-resources
18. Learn git commands by visualizing and practicing : https://learngitbranching.js.org/
19. 




#-- Revision
1. Absolute file path and relative file path
2. ../q1.png(goes to upper level) and ./q1.png(searches in the current directory) accessing the paths with special character
3. </h1> is a closing tag
4. void elements <br>, <hr>, these are also same, <br />,<hr />.
5. <a href="https://stellarium-web.org/">Stellarium</a>, <tag attribute=value>content</tag>
6. if you want an imgae to be hyperlinked then write <a><img/><a> write image inside the anchor
7. <!DOC HTML> represents the version of the html i.e version 5
8. to get the HTML boilerplate code type "!" and then press enter. You can get this for the files that are saved with .html
9. Types of style sheets : css, saas, less
10. 3 ways of adding css to html - inline, internal, external
    inline css goes into opening tag of the html
    <html style="background: blue"></html> , property is background and value is blue
    inline is limited to one element, and internal is limited to one document
    internal css :
    <html>
    <style>
    html{
        background : red;
    }
    </style>
    </html>
    inside teh css file the tag name is called selector
    External css : 
    <head>
    <link rel="stylesheet" href="./styles.css" />
    </head>
    in the above rel represents the relationship with the file and href represents the location
    if we are styling the h1, a, p tags then its called the lement selector
    selector represents that which part of the html should the rules apply to. rules written in the curly braces.
    class selector in css starts with a .
    <h1 class="cls-name">qwe</h1>
    .clas-name{
        color:red;
    }
    class selectors always start with the dot
11. id selector starts with #id-name
    <h1 id="main">qwe</h1>
    #main{
        color:red;
    }
    difference between id and class is class is used to apply for many elements but id are only applied for one elemnt. 
    incase u have a special element wher eyou wish to apply it only for that one then use id
12. Attribute selectors
<p draggable="true">qwe</p>
<p draggable="false">qwe</p>
    p[draggable]{
        color: red;
    }
    p[draggable="false"]{
        color:blue;
    }
    the baove code states that for all the p tag elements which have attribute draggable apply the css
    you can also specify with the value specific
13. universal selector
    *{
        color:red;
    }
    applies the css properties to all the elements
14. To revise all this refer to 5.3 module's css file
15. font-family: Helvetica, sans-serif - so if Helvetica is not supported in the os it uses next font sans-serif.
sans-serif is the generic font type. This is the reson why they use mutiple fonts in the font family.
16. font-family: "Times New Roman", serif - it is important to use double quotes for the fonts that have spaces.
The system will recognise it only if it is mentioned in double quotes.
17. fonts : em for the parent tag, rem for the root tag
18. in chrome dev inspection got to css overview for colors fonts and etc.
19. computed tab show ewhat are the final styles applied on the element
20. crossed styles represent that the respective ones are overridden
21. element->padding->border->margin. you can give 4 separate values like top, right, down, left.
But if you only give 2 values then 1-top&down, 2-right&left. 
22. So div tags are used to group elements and create a box.
23 chroe extension named pesticide is used for identifying div boxes.
24. The hierarchy of style applied are external style sheets->internal styles--> inline styles.
25. Refer to diagram for hierarchy of css rules. Importance > Type > Specificity > Position.
26. grouping css selectors 1. selector1, selector2..... 
        2. selector1 > selector2 this is a parent and child... it is the direct child not a grand child, it is the first generation child
        Apply to the direct child of left div -> p
        3. Descendant selector : selector1 selector2 which is a descendant. so for the parent there can be any number of inner childs
        still they all are descendents. div1 -> div2 -> p, now both p and div2 are descendants of div1
        4. chaining selectors apply where all selectors are True. selector1selector2  h1.class#main 
        it is always better to start with element then class and id. we will write very specific to an element.
        5. combining selectors. you can combine the above 4 selectors. selector1 selector2selector3
these are selctors so they can be anything like id selectors, class selectors
27. CSS positioning. Static, Relative, Absolute, Fixed.
Refer to the ink above for better understanding. Do the 7.2 module for practice.
28. CSS Display property. block, inline, inline-block. 
29. CSS float, left and right. for removing the float we can use clear : left; , clear : right;, clear : both;.
30. The reason they use the keyword screen in media query is that it will only be used when they print.
31. we use display : flex; or display : inline-flex;, and gap : 10px;
32. flex-direction: row; , column;. flex-basis : more like padding towards the flex-direction.
33. Flex sizing : content width < Width or Height < Flex-Basis < Min-width/Max-width.
    1. if width : 100px; but the container is too small it will override the width and shrink the data(items)
    2. width : 100px; and flex-basis : 200px; in this case the width is overridden and flex-basis is considered.
    But if the container doesn't have 200px then it will consider the min-width.
    3. flex-basis : 200px; max-width : 100px; then it will consider the max-width.
    4. if the flex-basis : 50px; and max-width : 100px; then it will consider flex-basis i.e that 50px;
    5. flex-basis : 200px; min-width : 300px; item size will be 300px; and it will disappear(go-off) below this point.
    6. flex-basis : 100px; flex-grow: 0; flex-shrink: 0; then the container items will start at 100px and doesn't grow or shrink.
    they stay constant.
    7. flex-basis : 100px; flex-grow : 1; flex-shrink : 0; then the intial item size value will be 100px; but the items in 
    teh container will grow upto the window size. But they only shrink until the 100px size and then later the data goes off.
    8. flex-basis : 100px; flex-grow : 0; flex-shrink : 1; then the intial size is always 100px but it will not grow.
    but it will shrink until the min-width(default...content-width...min word len). Then later it will go-off data will disappear.
    9. flex-basis: 100px; flex-grow: 1; flex-shrink: 1; then it will grow to maximum deoth and it will shrink to minimum depth.
    10. flex-basis : auto; flex-grow : 1; flex-shrink : 1; then it will assign individual size to each and every item based on its word len.
    and the sizes grow and shrink dynamically depending on the window size.
    11. flex : 1 1 0; this means grow=1, shrink=1, flex-basis=0; 
34. Grid. Difference between flex and grid. Flex is a tool to align content on a one dimension.
    Grid is a tool to layout content on a 2 dimensional plane.
    1. Instead of using both grid-template-rows and grid-template-columns we can just use grid-template : 1fr 2fr / 1fr 1fr;
    2. we can use "auto" in the template-rows. 
    grid-template-columns : 200px auto; -> the 1st column will be 200px wide and the 2nd column will occupy as much space as it can.
    grid-template-rows : 100px auto; the 1st row occupies 100px size but the 2nd row occupies only the content size(fit content). *** impo note ***
    For the Grid Sizing
    3. Fixed Sizing. Auto Size using auto keyword. 
    Fractional Size uses "fr"
    MinMax size : 100px minmax(400px, 800px)
    Repeat : repeat(2, 100px) this is same as 100px 100px
    if the matrix is more than the items then it starts filling from row 1 and leaves empty spaces in the remaining
    If we declare sizes for less items then the remaining items will go down but with the content size.
    So to handle the future divs or non-declared divs we use grid-auto-rows : 100px; grid-auto-columns : 100px;
    4. Grid placement... we use grid-column : span 2;
    grid-area : 2 / 1 / 3 / 3; which is grid-row-start / grid-column-start / grid-row-end / grid-column-end
    Note : if you want to use grid area then use grid area on all the items.
35. Bootstrap. There are many other CSS frameworks like Bootstrap. They are Foundation, MUI, Tailwind.
    1. down sides of CSS frameworks are class boats. It wont look clean and neat when we look at their class names.
    2. We wont have full control if we use CSS frameworks.
    3. Bootstrap uses a 12 column layout structure. and the code structure looks like a container_div -> row_div -> column_div
    "col-2" will occupy 2 columns and "col-4" occupies 4 columns.
    if you declare only 3 columns then those 3 columns will take the space of 12 default columns. where each column takes 4 column space.
    4. Bootstrap breakpoints has sm : small (Mobile), 
    md : medium (ipad and tablets)
    lg : large (laptops)
    xl : (desktops)
    xxl : huge displays
    5. We can declare the column class as col-sm-2, col-sm-4
    We can declare multiple breakpoints in a single class declaration "col-sm-12 col-md-8 col-lg-4". 
    if we declare col-2, col-4, then write the remaining one as col then it will take whatever columns left.
    6. All of the default bootstrap clases come from utilities.css
    7. Read the Bootstrap spacing. https://getbootstrap.com/docs/4.0/utilities/spacing/

36. Web Design understanding. 
    1. how do we make our brand stronger.
    And there's very very few things that we can think of that can actually produce a three times improvement
    in the value of your product or in the value of your company.
    So design is really really powerful.
    It's one of the cheapest ways to make your company or your product look expensive because it's elevating.
    2. There are 4 pillars of web design. Color Theory, Typography, UI design, UX design.
    3. Analogous colors from the color wheel are good using for navigating bars
    4. Taking the opposite colors the complimentary colors will look so pop out.
    Do not use the complimentary colors for texts and their backgrounds.
    We can use the triangle to pick the 3 colors or square to pick 4 colors.
    5. Try to manage the mood with the fonts.
    6. User-Interface : Use heirarchy. Do it by color, size, fonts. Layout.
    The ideal length of a paragraph is to maintain 40 to 60 characters per line. 
    Now one of the easiest ways of making any sort of design you create look professional is just to reduce
    the number of alignment points.
    White spacing. Spacing around the items makes it look expensive and professional.
    Design for your Audience.
    7. Simplicity matters. Consistency. Keep the design and functionality of the product consistent.
    Use the F-layout or Z-layout. Dont force the users to do something. like using dark patterns. 


#---JavaScript
39. Throughtout the 90's there was Netscape Navigator. Netscape was handling the 80% market share.
40. Brendan Eich first created the javascript in 10 days.
    Javascript was first once called Livescript and microsoft reverse engineer it to JScript.
    Javascript is almost supported in all the browsers
    You can open the JS console in the web chrome developer tools and run the javascript from the console itself.
    1. In chrome dev tools -> in the sources -> Insie the sources click menu section(>>) -> select snippets -> 
    then you can create js files and run them.
    2. "alert("Hellow"); - alert is function Hellow is Message and semicoln is end.
    3. use this link to check what stylistic choices to use in javascript. https://appbrewery.com/p/web-development-course-resources
    4. Empty cache and hard reload will doesn't erase the script but only remove the stored cache. like stored variable data.
41. the onload attribute tells that when the tag is executed the onload function is excecuted.
42. DOM - Document Object Model. It is used to change the elements data dynamically. It converts the HTML elements into tree.
    it turns each of these elements and their associated data into a tree structure with a whole bunch of objects that you can select and manipulate.
    The root is document. Thats how you call the objects i.e nodes. other elements.
    Our objects inside the DOM can have properties and methods. Properties describe something about the object.
    Method is something object can do.
43. firstElementChild. getElementsByTagName has plural of Elements which give an array even though it has only one element.
    querySelector picks the very first element with that selector.
    querSelectorAll gives all the elements with that selector. 
    document.querySelector("li").style.color = "red";
    You will use querySelector more often than getElement for selecting individual objects. 
44. The object css properties are always camel case like font-size in css but in the DOM it will be fontSize.
    HTML is Content. CSS is style. Javascript is Behaviour. 
    So you create styles with classes in style sheet but add them to objects using javascript.
    Thats how dynamically we can change the properties.
    document.querySelector("btn").classList.add("invisible");
    where as in style sheet we have already defined the class invisible
    .invisible{
        visibility : hidden;
    }
    in the same way we can remove the class for the object using classList.remove
    The toggle methods works like if the class is already added then remove it. if it is not there then add it.
45. So the innerHTML actually edits the content in between the tags. 
    document.querySelector("h1").innerHTML = "<em>Good Bye</em>";
    we can add tags.
    but what if <h1><em>Hello</em></h1>
    then if you try to acces like this document.querySelector("h1").innerHTML then the value is <em>Hello</em>.
    so to access only the content we have anothe rproperty called textContent. 
    document.querySelector("h1").textContent = "Good Bye";
46. document.querySelector("a").attributes; gives the attributes as a list.
    document.querySelector("a").getAttribute("href"); give the value.
    document.querySelector("a").setAttribute("href","https://www.bing.com"); changes the attribute value.
47. Event listeners in JS. they trigger methods whenever specified event is delivered to the targets.
    targets are document, element, window. 
    document.querySelector("h1").addEventListener("click", function_1);
    you never write the function_1() with parenthesis. writing with parenthesis acts as a method call.
    Because when we write it with parenthesis it will directly execute the method when the script is directly located in the html file.
    instead of waiting for the event(click) and then getting triggered.

    People write anonymus functions in the event listeners
    document.querySelector("h1").addEventListener("click", function(){
        alert()
    });
    addEventListener(type, method). type represents the type of event and method represents the method to be executed when type of event occured.
    once if a event listener is written then it continuously actively listening. and executes any number of times the event is served.

    $0 will work as that object. 

    The functions which can take other functions as input are called Higher order functions.

    debugger;
    execute statements.

    debugger is useful to debug the code step by step.
    use it for debugging. really useful.

    keyword "this" represents the identity of that target that triggered the event.

    Constructor function
    function Bell(name)
    {
        this.name = name;
        this.move = function() {
            alert("Hello");
        }
    } 



    Initialise object 
    var b1 = new Bell("Timmy");
    b1.move(); we call this function like this.
    Constructor function always starts with capital letter.

    document.addEventListener("keydown", function(event){
        trigger_audio(event.key)
    });
    in js event listener we can send the event to a function. that event has all the parameters relevent to the event.
    the parameter should not be just the event but with any name like evt, et anything.
    the funtion which was sent as a parameter is called callback function
48.
    If you want your js script to be executed only when the jquery is loaded and ready u write like this
    $(document).ready(function(){

    });


    if you write both the jquery plugin and js script tag in head section they may not work so for that you use the ready function.
    But if you wite both at the end of body tag then no need of ready method.

    $("h1").css("color"); this will return the value of color.

    $("h1").addClass("big-title");
    removeClass, hasClass.
    The $ matches all the elements.
    text("qwe") change the text of the element.
    attr for attribute
    adding event listeners
    $("h1").click(function(){
        $("h1").css("color", "red");
    })


    $(document).on("keypress", function(event){
        $('h1').text(event.key);
    });

    $("h1").before("<button>q1</button>");
    adds the button before the h1 tag. <button>q1</button> <h1>Hellow</h1>
    after adds after the h1 tag in the next line.
    prepend and append adds in the same line but before and after the button
    prepend  -->    <h1><button>q1</button>Hellow</h1>  adds before the h1 but still inside the h1 tag
    $("button").remove();  -->  will remove all of the buttons in our web page.

    $("h1").hide();  -- >  it actually hides the element
    $("h1").show();  -->  it re-appears the element
    $("h1").toggle();  -->  it toggles in between hide and show and switches.

    similarly we have more naimations methods. Slideup, slidedown, slidetoggle, Fadein, fadeout, fadetoggle.
    .animate() lets you build your custom css to animate. in animate always make sure the value is a number. can't take strings.
    $("h1").animate({opacity: 0.5, margin : "20%"});
    we can also chain the methods.
    $("h1").slideUp().slideDown().animate({opacity:0.5});
49. Cntrl A begining of command, Cntrl E, end of the command. Cntrl U clears the command.
    mkdir Folder_Name. 
    touch text_2.txt --> which creates the file
    start text_2.txt --> opens the file in UI
    code text_2.txt --> opens the file in VS code editor
    rm text_2.rtf will delete the file
    rm text_* will remove multiple files.
    pwd tells the current entire path.
    rm -r Dir_name/  --> removes the directory
50. You need a backend framework because it provides pre-built components and structures.
51. Node.js : An asynchronous event-driven javascript runtime, Node.js is designed to build scalable network applications.
    asynchronous means does multiple functionalities at a time. event-driven means parts of code executes based on events.
    because of its asynchronous in nature it is non-blocking.
    and node is also scalable.
    it also got a huge eco system.
    Node REPL : Read Eval Print Loop. It is the environment where user inputs are read and evaluated and returned back to the user.
    use cntrl c to exit of any command line.
    node index.js will execute the code like the console in the chrome dev tools.
    Native node modules are nothing but starting tool set.
    You need node to built apllications on the server side. For use of File access(reading and writing into the local file system)
    and networking over the internet for backend functionality.
    native modules comes as pre bundles like the games. Almost all of the old games are pre-bundled. 
    As node js liberates the javascript out of the browser so the files in your system can be altered.
    Using the File System which is a Native Node module that allows us to acces the local storage.
    npm conatins many modules and componenets wher ewe can use. which were contributdd  by devs. 
    it is more like a community tool library.
    npm init for configuring our package
    npm install  
    the package.json is our configuration file. 
    import module is for importing the ecma scripts
    import object/method_name from npm_package
    you have to insert a "type" : "module", in your json file to run the es scripts.
    npm init -y --> will give the old json data i.e your package details and updates it to the package.json.
    Node is not a framework but a run-time environment. that runs the javascript on a computer not limited to a browser.
52. ExpressJS. It is a JS Framework that allows us to create backends for our websites. 
    Most preofessional web developes build theior backend using node and express.
    Even VScode is built usng nodejs.
    We can also built a small backend only with node without including express but it would be more complex. 
    but with Express it is readable, less code, middleware. 
    Express Server using nodeJS and Express. 
    import express from "express"
    const app = express()
    app.listen(3000, () =>
    {
        console.log("server is runnign on port 3000");
    })

    app.listen actuallt takes 2 arguments one is port number and the other one is a call back function that executes when the server is
    all set and to listen on 3000. 3000 is where our server is listening to client requests.
    Using our own computer as a server for our website backend.
    http://localhost:3000
    port number is like a door number in our server to look for. It looks through the port number and search for the required resource.
    each every port has a unique number so each and every service, application, hardware can tap into each individual port,
    so in this way we have multiple services, applications running at the same time.
    command for finding out all the listeners : netstat -ano | findstr "LISTENING"
    HTTP : Hyper Text Transfer Protocol
    TP describes its a language for computer to talk over the internet.
    You cannot up 2 servers on the same port. 
    nodemon restarts the server automatically when a change is detected
    npm i -g nodemon : the -g command refers to install the package globally on my computer to use them regularly.
    /en /ca are the end points. which were written after the slash are calle dthe end points.
    by hitting the "/" we always target the home page
    http response codes types : https://developer.mozilla.org/en-US/docs/Web/HTTP/Status
    npm install will install all the dependencies.
    Middleware : body-parser is the famous module. It can look at the requests body before the handlers can access them.
    We need to use the app.use before any of the route handlers.
    Middleware consists of mainly 4 categories.
    1. Pre-Processing
    2. Authentication
    3. Error handling
    4. Login requests
    Body-parser belongs to pre-processing.
    morgan belongs to Logging.
    You can customise the middleware use method with method (req, res, next)... where you can call the next() method
    when you feel you have done the middleware. the next method will go the next blocks od code. If you want to implement
    multiple middlewares like authentication before logging in then you can use this.
    authentication next()
    loggin in next()
    get - /
    
53. EJS. We use templating to reder data on the frontend. multiple templating languages : handlebars, pug, TWIG (PHP),
    Jinja (Python), EJS.  
    See the EJS Tags for syntaxes
    So if you use the if(fruits) to check if theres something in fruits and then use it ... it actually doesn't work 
    like that. ejs tries to check fruits "Oh theres nothing then lets crash it". We need to understand the difference
    how javascript and EJS works differently.
    app.use(express.static("public"));  :  for declaring your public folder so that partials will be picked by EJS tags
    locals.result to check if the data exists if(locals.result) {} else {} 


54. Git : 
    ls -a : gives the list of hidden files too
    git log : will show the activity. Commits with details.
    git diff filename : it will give the differences of current file and commited repo.
    git checkout filename : will go back to the original file (or) previous file that was commited.
    git rm --cached -r . : After adding files to staging and want to remove those files. use this command. 
    rm for remove and -r for recursive and '.' for all the files
    .gitignore : you can specify which files to be hidden. specify the files name in .gitignore file. 
    you can write comments with '#' and '*.txt' this will hide all the files with txt extension.
    git branch : it will show the list of branches. And the current branch is bulleted with astrick.
    git checkout m1; git merge m2; : In this case imagine if c1->m1, c2->m2, a new commit will be created for m1 c3 
    which will have combination of c1 and c2. c1->c3<-c2.  c3->m1.
    But now if you do git checkout m2; git merge m1; it wont create a new commit, because m2 now is the ancestor of m1.
    so it will directly merge it. the branch always has the latest commit. brnahc is nothing but having a commit.


55. API's : 
    https://bored-api.appbrewery.com/filter?type=social&participants=2  => query parameters are separated by & and started with '?'.
    query parameters are for filtering and searching.
    path parameters are for identifying a resource.
    JSON : in json the kays are strings but values are dynamic. Where as in javascript object keys stay as keys.
    Use axios for making your backend make requests to another server.
    Authentication is of four types 
    0. No Authentication
    1. Basic Authentication
    2. API Key Authorisation
    3. Token based authentication
    
    base64decode website will decode your encrypted username and password that was in the Headers of authorization param.


    APIKey : while sending api keys it depends on the provider on how do we send the key either as the header or query params.
    always check the documentation for detailed info. but make sure to include the apikey in the authorization head.
    we can use axios for server side calling of API's.
    axios.get(url , {
        headers : {
            Authorization : `Bearer ${Token}`
        },
        params : {
            apiKey : ""
        },
        auth : {
            username : "",
            password : ""
        }
    })

    axios.post(url, body, config)
    same for put, patch

56. Build own API : 
    While building our own API. If we are following the RESTful architecture we need to be aware of these 5 categories.
    More like what makes API RESTful??
    The key principles of designing a RESTful API. Here is a summary:

1. **HTTP Methods**: The fundamental rule for a RESTful API is to use standard HTTP methods like GET, POST, PUT, PATCH, 
and DELETE for interactions.

2. **Standard Data Format**: The API should respond with a standard data format, such as JSON or XML, providing a consistent 
representation of resources.

3. **Client-Server Separation**: In RESTful APIs, clients and servers are separate entities, communicating over a network. 
This separation allows independent scaling and evolution of each side.

4. **Statelessness**: Each client-server interaction should be self-contained, with all necessary information included in 
the request. This enhances scalability and simplifies server-side implementation.

5. **Resource-Based**: REST APIs are centered around resources identified by unique resource locators (URLs or URIs). 
The Internet itself is considered a successful implementation of RESTful architecture.

http://localhost:3000/jokes/:id   =>  in this url the id is called the path variable we say it as path parameter.
when we give value to the id the url will be reformatted as "http://localhost:3000/4".

in javascript "===" means the value and the type both should be equal. But when you use "==" it just compares the value not type.
if('2'==2) will be true. if('2'===2) will be False. if(2===2) will be True.

path parameters are in params object and query parameters are in query object

var v = v1 || v2;
in the baove case if v1 equal to null then v2 will ve assigned to v. thats how javascript works


57. SQL : 
CREATE table products(
  id INT NOT NULL,
  name varchar(255),
  price FLOAT,
  PRIMARY KEY (id)
  )


  INSER INTO products
  VALUES (1, "ball", 1.5)

  UPDATE products
  SET price=0.5
  WHERE id=2

The ALTER TABLE statement is used to add, delete, or modify columns in an existing table.


555555. Authentication : 
Authentication serves two main purposes: securing user data and restricting access to 
certain areas of the website based on user status.

LEVEL_1 Authentication : Email & password


CREATE TABLE orders(
    id INT NOT NULL,
    order_number INT,
    customer_id INT,
    product_id INT,
    PRIMARY KEY (id),
    FOREIGN KEY (customer_id) REFERENCES customer(id),
    FOREIGN KEY (product_id) REFERENCES products(id)
)


id SERIAL PRIMARY KEY

csv - comma separated values
An emoji is UTF-8 data type
Use the TEXT datatype for storing the emojis in database bacuase TEXT handles UTF-8 better.


create table world_food (
    id serial primary key,
    country varchar(4 5),
    rice_production float

);


select * from world_foods;

select id, country from world_foods;


58. Authentication and security
No company will store user passwords directly into database. they store in excrypted formats
Modern Encryption is different we use "aes256".
Hashing : Hashing is most advanced and most used encryption type. One of the brilliant part of using the hashing is that
it is irreversible. Convert a text into hash string using the hash function. it is called hash variable. and this hash variable 
cannot be converted back into the original string. 
So if a user's password is converted into a hash variable and stored in the DB. When ever the user enters the password it 
converts the password into hash variable and compares with the one in the DB. So only the user knows the original password. 
We add salt (which some random string to the OG passwords) and then Has it. So that even though multiple users use same passwords 
it will be different in the databse. So in database we store the hash and salt both.
saltrounds : so when we have the salt(random number), if we use that and generate a hash code. That is called one salt round.
Now with the generated hash code if we again do the hashing with the salt it is saltround 2. 
So the more saltrounds the more secure. So in future when the GPU's increase then you can simply increase the salt rounds. To 
make it more secure. We call this bcrypt. latest GPU's has power of 20 billion MD5 hashes per second. But they can only 
compute 17,000 bcrypts per second. bcrypt uses blowfish cipher technique. Which is industry standard and more secure.




